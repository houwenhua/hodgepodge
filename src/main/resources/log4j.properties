# OFF、FATAL(罕见严重的错误)、ERROR(错误)、WARN(警告)、INFO(普通信息)、DEBUG(DeBug信息)、ALL，
#如果配置OFF则不打出任何信息，如果配置为INFO这样只显示INFO、WARN、ERROR的log信息，
#而DEBUG信息不会被显示,DEBUG级别上仅次与ALL象征日志全部输出.
#OFF和ALL没有实际意义象征全关开；
#lo4j配置参考网址 ：http://blog.java1234.com/blog/articles/271.html

#将DeBug或DeBug以下级别的信息,输出到控制台,File.log文件中,可选择多个输出配置,不指定输出配置就不输出;

log4j.rootLogger=DEBUG ,Console ,DailyRollingFile ,EFILE



### Console  :控制台输出配置   将本log4j文件以UTF-8保存否则乱码

#控制台日志使用的是这个类输出
log4j.appender.Console=org.apache.log4j.ConsoleAppender  

#日志输出布局格式,一般选PatternLayout:自定义输出,根据语法可控输出

log4j.appender.Console.layout=org.apache.log4j.PatternLayout  

#日志自定义具体输出布局格式,时,分,秒,日期,线程等log4j日志语法

log4j.appender.Console.layout.ConversionPattern=%d [%t] %-5p [%c] - %m%n



#!!!!!注意这个配置的日期文件名在本次无效,在过后一天产生日期文件名!!!!!
#假如日志数据量不是很大，我们可以用DailyRollingFileAppender 每天产生一个日志，方便查看；

### DailyRollingFile :每天产生一个日志文件的配置,推荐使用!!!!!
#控制台日志使用的是这个类输出
log4j.appender.DailyRollingFile = org.apache.log4j.DailyRollingFileAppender
#!!!!!注意这个配置的时间戳后缀在本次无效,在过后一天产生时间戳后缀!!!!! 【可调整时间测试】
#.log文件在硬盘的储存地址
log4j.appender.DailyRollingFile.File = D://ALocal//log4J_Journal//Day_log4j.log
#日志输出布局格式,一般选PatternLayout:自定义输出,根据语法可控输出
log4j.appender.DailyRollingFile.layout = org.apache.log4j.PatternLayout
#日志自定义具体输出布局格式,时,分,秒,日期,线程等log4j日志语法
log4j.appender.DailyRollingFile.layout.ConversionPattern =%d [%t] %-5p [%c] - %m%n




#假如日志数据量很大，我们一般用RollingFileAppender，固定尺寸的日志，假如超过了 就产生一个新的文件；
### RollingFile :文件大小到达指定尺寸的时候产生一个新的文件的配置;

#控制台日志使用的是这个类输出
log4j.appender.RollingFile = org.apache.log4j.RollingFileAppender
#.log文件在硬盘的储存地址
log4j.appender.RollingFile.File = D://ALocal//log4J_Journal//KB_log4j.log
#每个使用这种配置的.log文件的最终大小
log4j.appender.RollingFile.MaxFileSize=10KB
#最多5个10KB的文件,多则覆盖
log4j.appender.RollingFile.MaxBackupIndex=5
#日志输出布局格式,一般选PatternLayout:自定义输出,根据语法可控输出
log4j.appender.RollingFile.layout = org.apache.log4j.PatternLayout
#日志自定义具体输出布局格式,时,分,秒,日期,线程等log4j日志语法
log4j.appender.RollingFile.layout.ConversionPattern =%d [%t] %-5p [%c] - %m%n




### EFILE : 将ERROR以下的都输出到单独日志仓库配置:推荐使用查看错误信息!!!!!

log4j.appender.EFILE = org.apache.log4j.FileAppender
#File日志.log 存放地址和名称
log4j.appender.EFILE.File = D://ALocal//log4J_Journal//log4j_Error//ERROR.log
#日志输出布局格式,一般选PatternLayout:自定义输出,根据语法可控输出
log4j.appender.EFILE.layout = org.apache.log4j.PatternLayout
#日志自定义具体输出布局格式,时,分,秒,日期,线程等log4j日志语法
log4j.appender.EFILE.layout.ConversionPattern =%d [%t] %-5p [%c] - %m%n
#输出的自下而上的级别
log4j.appender.EFILE.Threshold = ERROR




###File  :文件输出地址和配置
#File日志文件使用这个类进行输出:不推荐!!!! 这个配置是依次在同一个文件追加Java程序日志.log直到文件体积无穷大;

log4j.appender.File = org.apache.log4j.FileAppender

#File日志.log 存放地址和名称

log4j.appender.File.File = D://ALocal//log4J_Journal//log4j.log

#日志输出布局格式,一般选PatternLayout:自定义输出,根据语法可控输出

log4j.appender.File.layout = org.apache.log4j.PatternLayout

#日志自定义具体输出布局格式,时,分,秒,日期,线程等log4j日志语法log4j.appender.File.layout = org.apache.log4j.PatternLayout

log4j.appender.File.layout.ConversionPattern =%d [%t] %-5p [%c] - %m%n





#####程序运行设置动态日志Demo###########################
#   //拿到log4j日志记录器对象

#import org.apache.log4j.Logger;

#    Logger logger = Logger.getLogger(当前类对象.class);

#两种常用方法(每个级别都可以传字符串和异常对象,但是要注意规范)


#    //1.在ERROR输出级别添加信息,可以配置error级别输出在独立日志仓库
#    //在log4j日志当前行添加并打印ERROR日志记录，根据记录级别在log4j.properties获取控制台和日志文件配置输出对应日志格式

#    logger.error("ERROR级别信息",new IOException("IO异常"))



#    //2.info常规日志输出
#    //在log4j日志当前行添加并打印INFO日志记录，根据记录级别在log4j.properties获取控制台和日志文件配置输出对应日志格式

#    logger.info("info级别信息") //输出常规info格式的值







################PatternLayout,自定义日志输出格式.更灵活#########################################3


#有个ConversionPattern属性，灵活配置输出属性：


#%m 输出代码中指定的消息；


#%M 输出打印该条日志的方法名；


#%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL；


#%r 输出自应用启动到输出该log信息耗费的毫秒数；


#%c 输出所属的类目，通常就是所在类的全名；


#%t 输出产生该日志事件的线程名；


#%n 输出一个回车换行符，Windows平台为"rn”，Unix平台为"n”；


#%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy-MM-dd HH:mm:ss,SSS}，输出类似：2002-10-18 22:10:28,921；


#%l 输出日志事件的发生位置，及在代码中的行数；